/* ALStub.h
   Generated by gSOAP 2.7.12 from I_ALBroker.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef ALStub_H
#define ALStub_H
#include <list>
#include <vector>
#ifndef WITH_NOGLOBAL
#define WITH_NOGLOBAL
#endif
#include "stdsoap2.h"
#include <alvalue/alvalue.h>


namespace AL {

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not redeclare here */

#endif



#if 0 /* volatile type: do not redeclare here */

#endif



#ifndef SOAP_TYPE_AL_al__ALModuleInfo
#define SOAP_TYPE_AL_al__ALModuleInfo (22)
/* al:ALModuleInfo */
class SOAP_CMAC al__ALModuleInfo
{
public:
  std::string name;  /* SOAP 1.2 RPC return element (when namespace qualified) */  /* required element of type xsd:string */
  int architecture;  /* required element of type xsd:int */
  std::string ip;  /* required element of type xsd:string */
  int port;  /* required element of type xsd:int */
  int processId;  /* required element of type xsd:int */
  int modulePointer;  /* required element of type xsd:int */
  bool isABroker;  /* required element of type xsd:bool */
  bool keepAlive;  /* required element of type xsd:bool */
public:
  virtual int soap_type() const { return 22; } /* = unique id SOAP_TYPE_AL_al__ALModuleInfo */
  virtual void soap_default(struct soap*);
  virtual void soap_serialize(struct soap*) const;
  virtual int soap_put(struct soap*, const char*, const char*) const;
  virtual int soap_out(struct soap*, const char*, int, const char*) const;
  virtual void *soap_get(struct soap*, const char*, const char*);
  virtual void *soap_in(struct soap*, const char*, const char*);
           al__ALModuleInfo() : architecture(0), port(0), processId(0), modulePointer(0), isABroker((bool)0), keepAlive((bool)0) { }
  virtual ~al__ALModuleInfo() { }
};
#endif

#ifndef SOAP_TYPE_AL_albroker__getBrokerInfoResponse
#define SOAP_TYPE_AL_albroker__getBrokerInfoResponse (23)
/* albroker:getBrokerInfoResponse */
struct albroker__getBrokerInfoResponse
{
public:
  al__ALModuleInfo _return;  /* SOAP 1.2 RPC return element (when namespace qualified) */  /* required element of type al:ALModuleInfo */
};
#endif

#ifndef SOAP_TYPE_AL_albroker__exploreToGetModuleByNameResponse
#define SOAP_TYPE_AL_albroker__exploreToGetModuleByNameResponse (24)
/* albroker:exploreToGetModuleByNameResponse */
struct albroker__exploreToGetModuleByNameResponse
{
public:
  al__ALModuleInfo _return;  /* SOAP 1.2 RPC return element (when namespace qualified) */  /* required element of type al:ALModuleInfo */
};
#endif

#ifndef SOAP_TYPE_AL_albroker__getModuleByNameResponse
#define SOAP_TYPE_AL_albroker__getModuleByNameResponse (25)
/* albroker:getModuleByNameResponse */
struct albroker__getModuleByNameResponse
{
public:
  al__ALModuleInfo _return;  /* SOAP 1.2 RPC return element (when namespace qualified) */  /* required element of type al:ALModuleInfo */
};
#endif

#ifndef SOAP_TYPE_AL_albroker__callNaoqiResponse
#define SOAP_TYPE_AL_albroker__callNaoqiResponse (26)
/* albroker:callNaoqiResponse */
struct albroker__callNaoqiResponse
{
public:
  ALValue _return;  /* SOAP 1.2 RPC return element (when namespace qualified) */  /* external */
};
#endif

#ifndef SOAP_TYPE_AL_albroker__callNaoqi2Response
#define SOAP_TYPE_AL_albroker__callNaoqi2Response (27)
/* albroker:callNaoqi2Response */
struct albroker__callNaoqi2Response
{
public:
  ALValue _return;  /* SOAP 1.2 RPC return element (when namespace qualified) */  /* external */
};
#endif

#ifndef SOAP_TYPE_AL_albroker__pCallNaoqiNResponse
#define SOAP_TYPE_AL_albroker__pCallNaoqiNResponse (28)
/* albroker:pCallNaoqiNResponse */
struct albroker__pCallNaoqiNResponse
{
public:
  ALValue _return;  /* SOAP 1.2 RPC return element (when namespace qualified) */  /* external */
};
#endif

#ifndef SOAP_TYPE_AL_albroker__getModuleListResponse
#define SOAP_TYPE_AL_albroker__getModuleListResponse (29)
/* albroker:getModuleListResponse */
struct albroker__getModuleListResponse
{
public:
  std::vector<al__ALModuleInfo >_return;  /* SOAP 1.2 RPC return element (when namespace qualified) */  /* optional element of type al:ALModuleInfo */
};
#endif

#ifndef SOAP_TYPE_AL_albroker__getBrokerListResponse
#define SOAP_TYPE_AL_albroker__getBrokerListResponse (31)
/* albroker:getBrokerListResponse */
struct albroker__getBrokerListResponse
{
public:
  std::vector<al__ALModuleInfo >_return;  /* SOAP 1.2 RPC return element (when namespace qualified) */  /* optional element of type al:ALModuleInfo */
};
#endif

#ifndef SOAP_TYPE_AL_albroker__getGlobalModuleListResponse
#define SOAP_TYPE_AL_albroker__getGlobalModuleListResponse (32)
/* albroker:getGlobalModuleListResponse */
struct albroker__getGlobalModuleListResponse
{
public:
  std::vector<al__ALModuleInfo >_return;  /* SOAP 1.2 RPC return element (when namespace qualified) */  /* optional element of type al:ALModuleInfo */
};
#endif

#ifndef SOAP_TYPE_AL_albroker__getDebugTaskListResponse
#define SOAP_TYPE_AL_albroker__getDebugTaskListResponse (33)
/* albroker:getDebugTaskListResponse */
struct albroker__getDebugTaskListResponse
{
public:
  ALValue _return;  /* SOAP 1.2 RPC return element (when namespace qualified) */  /* external */
};
#endif

#ifndef SOAP_TYPE_AL_albroker__callNaoqi
#define SOAP_TYPE_AL_albroker__callNaoqi (36)
/* albroker:callNaoqi */
struct albroker__callNaoqi
{
public:
  std::string _mod;  /* required element of type xsd:string */
  std::string _meth;  /* required element of type xsd:string */
  ALValue _p;  /* external */
};
#endif

#ifndef SOAP_TYPE_AL_albroker__callNaoqi2
#define SOAP_TYPE_AL_albroker__callNaoqi2 (39)
/* albroker:callNaoqi2 */
struct albroker__callNaoqi2
{
public:
  std::string _mod;  /* required element of type xsd:string */
  std::string _meth;  /* required element of type xsd:string */
  ALValue _p;  /* external */
};
#endif

#ifndef SOAP_TYPE_AL_albroker__pCallNaoqiN
#define SOAP_TYPE_AL_albroker__pCallNaoqiN (42)
/* albroker:pCallNaoqiN */
struct albroker__pCallNaoqiN
{
public:
  std::string _nIP;  /* required element of type xsd:string */
  int _nPort;  /* required element of type xsd:int */
  std::string _nMod;  /* required element of type xsd:string */
  std::string _nMeth;  /* required element of type xsd:string */
  std::string _mod;  /* required element of type xsd:string */
  std::string _meth;  /* required element of type xsd:string */
  ALValue _p;  /* external */
};
#endif

#ifndef SOAP_TYPE_AL_albroker__pCallNaoqi
#define SOAP_TYPE_AL_albroker__pCallNaoqi (45)
/* albroker:pCallNaoqi */
struct albroker__pCallNaoqi
{
public:
  std::string _mod;  /* required element of type xsd:string */
  std::string _meth;  /* required element of type xsd:string */
  ALValue _p;  /* external */
};
#endif

#ifndef SOAP_TYPE_AL_albroker__getModuleByName
#define SOAP_TYPE_AL_albroker__getModuleByName (48)
/* albroker:getModuleByName */
struct albroker__getModuleByName
{
public:
  std::string _pModuleName;  /* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_AL_albroker__exploreToGetModuleByName
#define SOAP_TYPE_AL_albroker__exploreToGetModuleByName (51)
/* albroker:exploreToGetModuleByName */
struct albroker__exploreToGetModuleByName
{
public:
  std::string _pModuleName;  /* required element of type xsd:string */
  bool _pSearchUp;  /* required element of type xsd:bool */
  bool _pSearchDown;  /* required element of type xsd:bool */
  std::string _pDontLookIntoBrokerName;  /* required element of type xsd:string */
  bool _pLoadLib;  /* required element of type xsd:bool */
};
#endif

#ifndef SOAP_TYPE_AL_albroker__getModuleList
#define SOAP_TYPE_AL_albroker__getModuleList (55)
/* albroker:getModuleList */
struct albroker__getModuleList
{
public:
  void *_;  /* transient */
};
#endif

#ifndef SOAP_TYPE_AL_albroker__getGlobalModuleList
#define SOAP_TYPE_AL_albroker__getGlobalModuleList (58)
/* albroker:getGlobalModuleList */
struct albroker__getGlobalModuleList
{
public:
  void *_;  /* transient */
};
#endif

#ifndef SOAP_TYPE_AL_albroker__getBrokerList
#define SOAP_TYPE_AL_albroker__getBrokerList (61)
/* albroker:getBrokerList */
struct albroker__getBrokerList
{
public:
  void *_;  /* transient */
};
#endif

#ifndef SOAP_TYPE_AL_albroker__registerBrokerResponse
#define SOAP_TYPE_AL_albroker__registerBrokerResponse (64)
/* albroker:registerBrokerResponse */
struct albroker__registerBrokerResponse
{
public:
  int _unused;  /* SOAP 1.2 RPC return element (when namespace qualified) */  /* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_AL_albroker__registerBroker
#define SOAP_TYPE_AL_albroker__registerBroker (65)
/* albroker:registerBroker */
struct albroker__registerBroker
{
public:
  al__ALModuleInfo _pBrokerToRegister;  /* required element of type al:ALModuleInfo */
};
#endif

#ifndef SOAP_TYPE_AL_albroker__unregisterBrokerResponse
#define SOAP_TYPE_AL_albroker__unregisterBrokerResponse (67)
/* albroker:unregisterBrokerResponse */
struct albroker__unregisterBrokerResponse
{
public:
  int _unused;  /* SOAP 1.2 RPC return element (when namespace qualified) */  /* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_AL_albroker__unregisterBroker
#define SOAP_TYPE_AL_albroker__unregisterBroker (68)
/* albroker:unregisterBroker */
struct albroker__unregisterBroker
{
public:
  al__ALModuleInfo _pBrokerToUnregister;  /* required element of type al:ALModuleInfo */
};
#endif

#ifndef SOAP_TYPE_AL_albroker__unregisterModuleReference
#define SOAP_TYPE_AL_albroker__unregisterModuleReference (70)
/* albroker:unregisterModuleReference */
struct albroker__unregisterModuleReference
{
public:
  std::string _moduleName;  /* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_AL_albroker__getBrokerInfo
#define SOAP_TYPE_AL_albroker__getBrokerInfo (73)
/* albroker:getBrokerInfo */
struct albroker__getBrokerInfo
{
public:
  void *_;  /* transient */
};
#endif

#ifndef SOAP_TYPE_AL_albroker__exit
#define SOAP_TYPE_AL_albroker__exit (75)
/* albroker:exit */
struct albroker__exit
{
#ifdef WITH_NOEMPTYSTRUCT
private:
  char dummy;  /* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_AL_albroker__getMethodListResponse
#define SOAP_TYPE_AL_albroker__getMethodListResponse (83)
/* albroker:getMethodListResponse */
struct albroker__getMethodListResponse
{
public:
  std::vector<std::string >_pMethodListName;  /* SOAP 1.2 RPC return element (when namespace qualified) */  /* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_AL_albroker__getMethodList
#define SOAP_TYPE_AL_albroker__getMethodList (84)
/* albroker:getMethodList */
struct albroker__getMethodList
{
public:
  std::string _pModuleName;  /* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_AL_albroker__initResponse
#define SOAP_TYPE_AL_albroker__initResponse (89)
/* albroker:initResponse */
struct albroker__initResponse
{
public:
  int *_unused;  /* SOAP 1.2 RPC return element (when namespace qualified) */  /* optional element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_AL_albroker__init
#define SOAP_TYPE_AL_albroker__init (90)
/* albroker:init */
struct albroker__init
{
public:
  std::string _pBrokerName;  /* required element of type xsd:string */
  std::string _pIP;  /* required element of type xsd:string */
  int _pPort;  /* required element of type xsd:int */
  std::string _pParentBrokerIP;  /* required element of type xsd:string */
  int _pParentBrokerPort;  /* required element of type xsd:int */
  bool _pKeepAlive;  /* required element of type xsd:bool */
};
#endif

#ifndef SOAP_TYPE_AL_albroker__versionResponse
#define SOAP_TYPE_AL_albroker__versionResponse (93)
/* albroker:versionResponse */
struct albroker__versionResponse
{
public:
  std::string _pVersion;  /* SOAP 1.2 RPC return element (when namespace qualified) */  /* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_AL_albroker__version
#define SOAP_TYPE_AL_albroker__version (94)
/* albroker:version */
struct albroker__version
{
#ifdef WITH_NOEMPTYSTRUCT
private:
  char dummy;  /* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_AL_albroker__sendBackIPResponse
#define SOAP_TYPE_AL_albroker__sendBackIPResponse (96)
/* albroker:sendBackIPResponse */
struct albroker__sendBackIPResponse
{
public:
  std::string pIP;  /* SOAP 1.2 RPC return element (when namespace qualified) */  /* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_AL_albroker__sendBackIP
#define SOAP_TYPE_AL_albroker__sendBackIP (97)
/* albroker:sendBackIP */
struct albroker__sendBackIP
{
public:
  void *_;  /* transient */
};
#endif

#ifndef SOAP_TYPE_AL_albroker__getBrokerNameResponse
#define SOAP_TYPE_AL_albroker__getBrokerNameResponse (99)
/* albroker:getBrokerNameResponse */
struct albroker__getBrokerNameResponse
{
public:
  std::string _pBrokerName;  /* SOAP 1.2 RPC return element (when namespace qualified) */  /* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_AL_albroker__getBrokerName
#define SOAP_TYPE_AL_albroker__getBrokerName (100)
/* albroker:getBrokerName */
struct albroker__getBrokerName
{
public:
  void *_;  /* transient */
};
#endif

#ifndef SOAP_TYPE_AL_albroker__getInfo
#define SOAP_TYPE_AL_albroker__getInfo (103)
/* albroker:getInfo */
struct albroker__getInfo
{
public:
  std::string _pModuleName;  /* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_AL_albroker__stopTaskResponse
#define SOAP_TYPE_AL_albroker__stopTaskResponse (105)
/* albroker:stopTaskResponse */
struct albroker__stopTaskResponse
{
public:
  int _num;  /* SOAP 1.2 RPC return element (when namespace qualified) */  /* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_AL_albroker__stopTask
#define SOAP_TYPE_AL_albroker__stopTask (106)
/* albroker:stopTask */
struct albroker__stopTask
{
public:
  int _id;  /* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_AL_albroker__stopTaskNameResponse
#define SOAP_TYPE_AL_albroker__stopTaskNameResponse (108)
/* albroker:stopTaskNameResponse */
struct albroker__stopTaskNameResponse
{
public:
  int _num;  /* SOAP 1.2 RPC return element (when namespace qualified) */  /* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_AL_albroker__stopTaskName
#define SOAP_TYPE_AL_albroker__stopTaskName (109)
/* albroker:stopTaskName */
struct albroker__stopTaskName
{
public:
  std::string _name;  /* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_AL_albroker__getDebugTaskList
#define SOAP_TYPE_AL_albroker__getDebugTaskList (112)
/* albroker:getDebugTaskList */
struct albroker__getDebugTaskList
{
public:
  void *_;  /* transient */
};
#endif

#ifndef SOAP_TYPE_AL_SOAP_ENV__Header
#define SOAP_TYPE_AL_SOAP_ENV__Header (113)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
  char dummy;  /* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_AL_SOAP_ENV__Code
#define SOAP_TYPE_AL_SOAP_ENV__Code (114)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
  char *SOAP_ENV__Value;  /* optional element of type xsd:QName */
  struct SOAP_ENV__Code *SOAP_ENV__Subcode;  /* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_AL_SOAP_ENV__Detail
#define SOAP_TYPE_AL_SOAP_ENV__Detail (116)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
  int __type;  /* any type of element <fault> (defined below) */
  void *fault;  /* transient */
  char *__any;
};
#endif

#ifndef SOAP_TYPE_AL_SOAP_ENV__Reason
#define SOAP_TYPE_AL_SOAP_ENV__Reason (117)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
  char *SOAP_ENV__Text;  /* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_AL_SOAP_ENV__Fault
#define SOAP_TYPE_AL_SOAP_ENV__Fault (118)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
  char *faultcode;  /* optional element of type xsd:QName */
  char *faultstring;  /* optional element of type xsd:string */
  char *faultactor;  /* optional element of type xsd:string */
  struct SOAP_ENV__Detail *detail;  /* optional element of type SOAP-ENV:Detail */
  struct SOAP_ENV__Code *SOAP_ENV__Code;  /* optional element of type SOAP-ENV:Code */
  struct SOAP_ENV__Reason *SOAP_ENV__Reason;  /* optional element of type SOAP-ENV:Reason */
  char *SOAP_ENV__Node;  /* optional element of type xsd:string */
  char *SOAP_ENV__Role;  /* optional element of type xsd:string */
  struct SOAP_ENV__Detail *SOAP_ENV__Detail;  /* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE_AL_xsd__anyType
#define SOAP_TYPE_AL_xsd__anyType (21)
typedef ALValue xsd__anyType;
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE_AL__QName
#define SOAP_TYPE_AL__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE_AL__XML
#define SOAP_TYPE_AL__XML (6)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE_AL_xsd__string
#define SOAP_TYPE_AL_xsd__string (10)
typedef std::string xsd__string;
#endif

#ifndef SOAP_TYPE_AL_xsd__int
#define SOAP_TYPE_AL_xsd__int (11)
typedef int xsd__int;
#endif

#ifndef SOAP_TYPE_AL_xsd__bool
#define SOAP_TYPE_AL_xsd__bool (13)
typedef bool xsd__bool;
#endif

#ifndef SOAP_TYPE_AL_xsd__double
#define SOAP_TYPE_AL_xsd__double (15)
typedef double xsd__double;
#endif

#ifndef SOAP_TYPE_AL_xsd__float
#define SOAP_TYPE_AL_xsd__float (17)
typedef float xsd__float;
#endif


/******************************************************************************\
 *                                                                            *
 * Typedef Synonyms                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operations                                                         *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 albroker__callNaoqi(struct soap*, std::string _mod, std::string _meth, ALValue _p, struct albroker__callNaoqiResponse &_r);

SOAP_FMAC5 int SOAP_FMAC6 albroker__callNaoqi2(struct soap*, std::string _mod, std::string _meth, ALValue _p, struct albroker__callNaoqi2Response &_r);

SOAP_FMAC5 int SOAP_FMAC6 albroker__pCallNaoqiN(struct soap*, std::string _nIP, int _nPort, std::string _nMod, std::string _nMeth, std::string _mod, std::string _meth, ALValue _p, struct albroker__pCallNaoqiNResponse &_r);

SOAP_FMAC5 int SOAP_FMAC6 albroker__pCallNaoqi(struct soap*, std::string _mod, std::string _meth, ALValue _p);

SOAP_FMAC5 int SOAP_FMAC6 albroker__getModuleByName(struct soap*, std::string _pModuleName, struct albroker__getModuleByNameResponse &_pModInfo);

SOAP_FMAC5 int SOAP_FMAC6 albroker__exploreToGetModuleByName(struct soap*, std::string _pModuleName, bool _pSearchUp, bool _pSearchDown, std::string _pDontLookIntoBrokerName, bool _pLoadLib, struct albroker__exploreToGetModuleByNameResponse &_pModInfo);

SOAP_FMAC5 int SOAP_FMAC6 albroker__getModuleList(struct soap*, void *_, struct albroker__getModuleListResponse &_pModuleList);

SOAP_FMAC5 int SOAP_FMAC6 albroker__getGlobalModuleList(struct soap*, void *_, struct albroker__getGlobalModuleListResponse &_pModuleList);

SOAP_FMAC5 int SOAP_FMAC6 albroker__getBrokerList(struct soap*, void *_, struct albroker__getBrokerListResponse &_pBrokerList);

SOAP_FMAC5 int SOAP_FMAC6 albroker__registerBroker(struct soap*, al__ALModuleInfo _pBrokerToRegister, int &_unused);

SOAP_FMAC5 int SOAP_FMAC6 albroker__unregisterBroker(struct soap*, al__ALModuleInfo _pBrokerToUnregister, int &_unused);

SOAP_FMAC5 int SOAP_FMAC6 albroker__unregisterModuleReference(struct soap*, std::string _moduleName);

SOAP_FMAC5 int SOAP_FMAC6 albroker__getBrokerInfo(struct soap*, void *_, struct albroker__getBrokerInfoResponse &_getBrokerInfoResponse);

SOAP_FMAC5 int SOAP_FMAC6 albroker__exit(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 albroker__getMethodList(struct soap*, std::string _pModuleName, std::vector<std::string >&_pMethodListName);

SOAP_FMAC5 int SOAP_FMAC6 albroker__init(struct soap*, std::string _pBrokerName, std::string _pIP, int _pPort, std::string _pParentBrokerIP, int _pParentBrokerPort, bool _pKeepAlive, int *_unused);

SOAP_FMAC5 int SOAP_FMAC6 albroker__version(struct soap*, std::string &_pVersion);

SOAP_FMAC5 int SOAP_FMAC6 albroker__sendBackIP(struct soap*, void *_, std::string &pIP);

SOAP_FMAC5 int SOAP_FMAC6 albroker__getBrokerName(struct soap*, void *_, std::string &_pBrokerName);

SOAP_FMAC5 int SOAP_FMAC6 albroker__getInfo(struct soap*, std::string _pModuleName, al__ALModuleInfo &_pModuleInfo);

SOAP_FMAC5 int SOAP_FMAC6 albroker__stopTask(struct soap*, int _id, int &_num);

SOAP_FMAC5 int SOAP_FMAC6 albroker__stopTaskName(struct soap*, std::string _name, int &_num);

SOAP_FMAC5 int SOAP_FMAC6 albroker__getDebugTaskList(struct soap*, void *_, struct albroker__getDebugTaskListResponse &_r);

/******************************************************************************\
 *                                                                            *
 * Stubs                                                                      *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call_albroker__callNaoqi(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _mod, std::string _meth, ALValue _p, struct albroker__callNaoqiResponse &_r);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_albroker__callNaoqi2(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _mod, std::string _meth, ALValue _p, struct albroker__callNaoqi2Response &_r);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_albroker__pCallNaoqiN(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _nIP, int _nPort, std::string _nMod, std::string _nMeth, std::string _mod, std::string _meth, ALValue _p, struct albroker__pCallNaoqiNResponse &_r);

SOAP_FMAC5 int SOAP_FMAC6 soap_send_albroker__pCallNaoqi(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _mod, std::string _meth, ALValue _p);

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_albroker__pCallNaoqi(struct soap *soap, struct albroker__pCallNaoqi *_param_1);


SOAP_FMAC5 int SOAP_FMAC6 soap_call_albroker__getModuleByName(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _pModuleName, struct albroker__getModuleByNameResponse &_pModInfo);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_albroker__exploreToGetModuleByName(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _pModuleName, bool _pSearchUp, bool _pSearchDown, std::string _pDontLookIntoBrokerName, bool _pLoadLib, struct albroker__exploreToGetModuleByNameResponse &_pModInfo);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_albroker__getModuleList(struct soap *soap, const char *soap_endpoint, const char *soap_action, void *_, struct albroker__getModuleListResponse &_pModuleList);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_albroker__getGlobalModuleList(struct soap *soap, const char *soap_endpoint, const char *soap_action, void *_, struct albroker__getGlobalModuleListResponse &_pModuleList);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_albroker__getBrokerList(struct soap *soap, const char *soap_endpoint, const char *soap_action, void *_, struct albroker__getBrokerListResponse &_pBrokerList);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_albroker__registerBroker(struct soap *soap, const char *soap_endpoint, const char *soap_action, al__ALModuleInfo _pBrokerToRegister, int &_unused);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_albroker__unregisterBroker(struct soap *soap, const char *soap_endpoint, const char *soap_action, al__ALModuleInfo _pBrokerToUnregister, int &_unused);

SOAP_FMAC5 int SOAP_FMAC6 soap_send_albroker__unregisterModuleReference(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _moduleName);

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_albroker__unregisterModuleReference(struct soap *soap, struct albroker__unregisterModuleReference *_param_2);


SOAP_FMAC5 int SOAP_FMAC6 soap_call_albroker__getBrokerInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, void *_, struct albroker__getBrokerInfoResponse &_getBrokerInfoResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_send_albroker__exit(struct soap *soap, const char *soap_endpoint, const char *soap_action);

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_albroker__exit(struct soap *soap, struct albroker__exit *_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_albroker__getMethodList(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _pModuleName, std::vector<std::string >&_pMethodListName);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_albroker__init(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _pBrokerName, std::string _pIP, int _pPort, std::string _pParentBrokerIP, int _pParentBrokerPort, bool _pKeepAlive, int *_unused);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_albroker__version(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string &_pVersion);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_albroker__sendBackIP(struct soap *soap, const char *soap_endpoint, const char *soap_action, void *_, std::string &pIP);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_albroker__getBrokerName(struct soap *soap, const char *soap_endpoint, const char *soap_action, void *_, std::string &_pBrokerName);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_albroker__getInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _pModuleName, al__ALModuleInfo &_pModuleInfo);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_albroker__stopTask(struct soap *soap, const char *soap_endpoint, const char *soap_action, int _id, int &_num);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_albroker__stopTaskName(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _name, int &_num);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_albroker__getDebugTaskList(struct soap *soap, const char *soap_endpoint, const char *soap_action, void *_, struct albroker__getDebugTaskListResponse &_r);

/******************************************************************************\
 *                                                                            *
 * Skeletons                                                                  *
 *                                                                            *
\******************************************************************************/

SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_albroker__callNaoqi(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_albroker__callNaoqi2(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_albroker__pCallNaoqiN(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_albroker__pCallNaoqi(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_albroker__getModuleByName(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_albroker__exploreToGetModuleByName(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_albroker__getModuleList(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_albroker__getGlobalModuleList(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_albroker__getBrokerList(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_albroker__registerBroker(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_albroker__unregisterBroker(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_albroker__unregisterModuleReference(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_albroker__getBrokerInfo(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_albroker__exit(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_albroker__getMethodList(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_albroker__init(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_albroker__version(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_albroker__sendBackIP(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_albroker__getBrokerName(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_albroker__getInfo(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_albroker__stopTask(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_albroker__stopTaskName(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_albroker__getDebugTaskList(struct soap*);

} // namespace AL


#endif

/* End of ALStub.h */
